#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <netinet/in.h>
#include <linux/netfilter.h>
#include <libnetfilter_queue/libnetfilter_queue.h>
#include <string.h>
#include <time.h>
#include <linux/ip.h>
#include <linux/tcp.h>
#include <linux/udp.h>
#include <linux/icmp.h>
#include <arpa/inet.h>
#include <libmnl/libmnl.h>
#include <linux/netfilter/nfnetlink.h>
#include <linux/types.h>
#include <linux/netfilter/nfnetlink_queue.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <linux/kernel.h>
#include <linux/module.h>

#define MATCH 0
#define NMATCH 1


//Global Varibles


int enable_flag=1;
unsigned int controlled_protocol = 0;
unsigned short controlled_srcport = 0;
unsigned short controlled_dstport = 0;
unsigned int controlled_saddr = 0;
unsigned int controlled_daddr = 0;
struct iphdr *piphdr;
//Used in Libnetfilter_queue
int fd;
struct nfq_handle *h;
struct nfq_q_handle *qh;
struct nfnl_handle *nh;

void display_usage(char *commandname)
{
    printf("Usage1: %s\n",commandname);
    printf("Usage2: %s -x saddr -y daddr -m srcport -n dstport\n",commandname);
}

int getpara(int argc,char *argv[])
{
    int optret;
    unsigned short tmpport;
    optret = getopt(argc,argv,"pxymnh");
    while(optret != -1)
    {
        printf("First in getpara:%s\n",argv[optind]);
        switch(optret){
            case 'p':
                if(strncmp(argv[optind],"ping",4)==0)
                    controlled_protocol=1;
                else
                    if(strncmp(argv[optind],"tcp",3)==0)
                        controlled_protocol=6;
                    else
                    {
                        if(strncmp(argv[optind],"udp",3)==0)
                            controlled_protocol=17;
                        else
                        {
                            printf("Unknown protocol!\n");
                            exit(1);
                        }
                        
                    }
                break;
            case 'x':
                if( inet_aton(argv[optind],(struct in_addr *)&controlled_saddr) == 0 ){
                    printf("Invalid source ip address!\n");
                    exit(1);
                }
                break;
            case 'y':
                if( inet_aton(argv[optind],(struct in_addr *)&controlled_daddr) == 0 ){
                    printf("Invalid destination ip address!\n");
                    exit(1);
                }
                break;
            case 'm':
                tmpport=atoi(argv[optind]);
                if(tmpport==0)
                {
                    printf("Invalid source port!\n");
                    exit(1);
                }
                controlled_srcport=htons(tmpport);
                break;
            case 'n':
                tmpport=atoi(argv[optind]);
                if(tmpport==0)
                {
                    printf("Invalid destination port!\n");
                    exit(1);
                }
                controlled_dstport=htons(tmpport);
                break;     
            case 'h':
                display_usage(argv[0]);
                exit(1);
            default:
                printf("Invalid parameters.\n");
                display_usage(argv[0]);
                exit(1);     
        }
    }
}



int port_check(unsigned short srcport,unsigned short dstport)
{
    //Control all the port
    if((controlled_srcport==0)&&(controlled_dstport==0))
    {
        return MATCH;
    }
    //Only consider destination port
    if((controlled_srcport!=0)&&(controlled_dstport==0))
    {
        if(controlled_srcport==srcport)
            return MATCH;
        else
            return NMATCH;
    }
    //Only consider destination port
    if((controlled_srcport==0)&&(controlled_dstport!=0))
    {
        if(controlled_dstport==dstport)
            return MATCH;
        else
            return NMATCH;
    }

    if((controlled_srcport!=0)&&(controlled_dstport!=0))
    {
        if((controlled_srcport==srcport)&&(controlled_dstport==dstport))
            return MATCH;
        else
            return NMATCH;
    }
    return NMATCH;
}

int ipaddr_check(unsigned int saddr,unsigned int daddr)
{
    if((controlled_saddr==0)&&(controlled_daddr==0))
        return MATCH;
    if((controlled_saddr!=0)&&(controlled_daddr==0)){
        if(controlled_saddr==saddr)
            return MATCH;
        else
            return NMATCH;
    }
    if((controlled_saddr==0)&&(controlled_daddr!=0)){
        if(controlled_daddr==daddr)
            return MATCH;
        else
            return NMATCH;
    }
    if((controlled_saddr!=0)&&(controlled_daddr!=0)){
        if((controlled_saddr==saddr)&&(controlled_daddr==daddr))
            return MATCH;
        else
            return NMATCH;
    }
    return NMATCH;
}

int icmp_check(void)
{
    struct icmphdr * picmphdr;
    picmphdr=(struct icmphdr *)((char *)piphdr+piphdr->ihl*4);
    if(picmphdr->type==8)
    {
        if(ipaddr_check(piphdr->saddr,piphdr->daddr)==MATCH)
        {
            //printk("An ICMP packet is denied.\n");
            return NF_DROP;
        }
    }
    if(picmphdr->type==0)
    {
        if(ipaddr_check(piphdr->daddr,piphdr->saddr)==MATCH)
        {
            //printk("An ICMP packet is denied.\n");
            return NF_DROP;
        }
    }
    return NF_ACCEPT;
}


int tcp_check(void)
{
    struct tcphdr *ptcpher;
    ptcpher = (struct tcphdr *)((char *)piphdr+piphdr->ihl*4);
    if((ipaddr_check(piphdr->saddr,piphdr->daddr)==MATCH) && port_check(ptcpher->source,ptcpher->dest)==MATCH)
    {
        //printk works in kernel mode, is the same as printf
        //printk("A TCP packet is denied!\n");
        return NF_DROP;
    }
    else
        return NF_ACCEPT;
}

int udp_check(void)
{
    struct udphdr *pudpher;
    pudpher = (struct udphdr *)((char *)piphdr+piphdr->ihl*4);
    if((ipaddr_check(piphdr->saddr,piphdr->daddr)==MATCH) && port_check(pudpher->source,pudpher->dest)==MATCH)
    {
        //printk works in kernel mode, is the same as printf
        //printk("A UDP packet is denied!\n");
        return NF_DROP;
    }
    else
        return NF_ACCEPT;
}

static int callback(struct nfq_q_handle *qh,struct nfgenmsg *nfmsg,struct nfq_data *nfa, void *data)
{
    int id=0;
    struct nfqnl_msg_packet_hdr *ph;
    unsigned char *pdata = NULL;
    int pdata_len;
    int dealmethod=NF_DROP;
    char srcstr[32],deststr[32];
    ph= nfq_get_msg_packet_hdr(nfa);
    if(ph==NULL)
        return 1;
    id=ntohl(ph->packet_id);
    //If firewall is disabled, let packets pass
    if(enable_flag==0)
    {
        return nfq_set_verdict(qh,id,NF_ACCEPT,0,NULL);
    }
    //Get packet from IP layer
    pdata_len = nfq_get_payload(nfa,(char**)&pdata);
    if(pdata!=NULL)
        piphdr = (struct iphdr *) pdata;
    else
        return 1;
    inet_ntop(AF_INET,&(piphdr->saddr),srcstr,32);
    inet_ntop(AF_INET,&(piphdr->daddr),deststr,32);
    printf("get a packet:%s -> %s",srcstr,deststr);
    if(piphdr->protocol==controlled_protocol)
    {
        //ICMP
        if(piphdr->protocol==1)
            dealmethod=icmp_check();
        else{
            //TCP
            if(piphdr->protocol==6)
                dealmethod=tcp_check();
            else{
                //UDP
                if(piphdr->protocol==17)
                    dealmethod=udp_check();
                else{
                    printf("Can't find packet's type");
                    dealmethod=NF_ACCEPT;
                }
            }
        }
    }
    else
    {
        dealmethod=NF_ACCEPT;
    }
    return nfq_set_verdict(qh,id,dealmethod,0,NULL);
}


int main(int argc, char **argv){
    //Remember to make it longer
    char buf[1600];
    int length;
    //In this mode all packets will pass
    if(argc==1){
        enable_flag==0;
    }
    else{
        //getpara function get data from argv, we don't need
        getpara(argc,argv); 
    }
    h = nfq_open();
    if(!h)
    {
        fprintf(stderr,"Error during nfq_open.\n");
        exit(1);
    }
    //Eliminate existing bind to nf_queue handle.
    if(nfq_unbind_pf(h,AF_INET)<0)
    {
        fprintf(stderr,"Error during nfq_unbind.\n");
        exit(1);
    }
    if(nfq_bind_pf(h,AF_INET)<0)
    {
        fprintf(stderr,"Error during nfq_bind.\n");
        exit(1);
    }
    //callback function is important
    qh = nfq_create_queue(h,0,&callback,NULL);
    if(!qh)
    {
        fprintf(stderr,"Error during nfq_creat.\n");
        exit(1);
    }
    //NFQNL_COPY_PACKET means return packets
    if(nfq_set_mode(qh,NFQNL_COPY_PACKET,0xffff)<0)
    {
        fprintf(stderr,"Error during nfq_set_mode.\n");
    }
    nh=nfq_nfnlh(h);
    fd=nfnl_fd(nh);
    while(1){
        length=recv(fd,buf,1600,0);  //receive data packets
        nfq_handle_packet(h,buf,length); //Call callback function to process packets,then send packet.
        //if wants to see the packet,perhaps fprintf buf here
    }
    nfq_destroy_queue(qh);
    nfq_close(h);
    exit(0);
}

